<?xml version='1.0'?>
<rules xmlns="http://www.loc.gov/bf2marc"
       xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
       xmlns:bf="http://id.loc.gov/ontologies/bibframe/"
       xmlns:bflc="http://id.loc.gov/ontologies/bflc/"
       xmlns:madsrdf="http://www.loc.gov/mads/rdf/v1#"
       xmlns:marc="http://www.loc.gov/MARC21/slim"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <df tag="010" repeatable="false">
    <context xpath="bf:Instance/bf:identifiedBy/*[
        (local-name()='Lccn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']) and
        not(
          bf:status/bf:Status/rdfs:label[text()='invalid'] or
          bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
          bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'
        )]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="a" repeatable="false">
        <select xpath="rdf:value"/>
      </sf>
      <sf code="z">
        <select xpath="ancestor::bf:Instance/bf:identifiedBy/*[
            (local-name()='Lccn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']) and
            (
              bf:status/bf:Status/rdfs:label[text()='invalid'] or
              bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
              bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'
            )]/rdf:value"/>
      </sf>
    </context>
  </df>

  <df tag="015">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Nbn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Nbn']]">
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
      <switch>
        <case test="bf:source/bf:Source/*[local-name()='code']">
          <sf code="2"><transform><xsl:value-of select="bf:source/bf:Source/*[local-name()='code'][1]"/></transform></sf>
        </case>
        <case test="$vSourceUri != ''">
          <sf code="2">
            <switch>
              <case test="contains($vSourceUri,'id.loc.gov')">
                <transform>
                  <xsl:call-template name="tUriCode">
                    <xsl:with-param name="pUri" select="$vSourceUri"/>
                  </xsl:call-template>
                </transform>
              </case>
              <case test="default"><transform><xsl:value-of select="$vSourceUri"/></transform></case>
            </switch>
          </sf>
        </case>
      </switch>
    </context>
  </df>

  <df tag="016">
    <context xpath="bf:Instance/bf:adminMetadata/bf:AdminMetadata/bf:identifiedBy/bf:Local[bf:source/bf:Source] |
                    bf:Work/bf:adminMetadata/bf:AdminMetadata/bf:identifiedBy/bf:Local[bf:source/bf:Source]">
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vLAC">
        <switch>
          <case test="$vSourceUri='http://id.loc.gov/authorities/names/no2004037399' or
                      bf:source/bf:Source/rdfs:label='OONL' or
                      bf:source/bf:Source/rdfs:label='Library and Archives Canada'">true</case>
        </switch>
      </var>
      <ind1 default="7">
        <switch>
          <case test="$vLAC='true'"><text> </text></case>
        </switch>
      </ind1>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
      <switch>
        <case test="not($vLAC='true')">
          <switch>
            <case test="bf:source/bf:Source/*[local-name()='code']">
              <sf code="2"><transform><xsl:value-of select="bf:source/bf:Source/*[local-name()='code'][1]"/></transform></sf>
            </case>
            <case test="$vSourceUri != ''">
              <sf code="2">
                <switch>
                  <case test="contains($vSourceUri,'id.loc.gov')">
                    <transform>
                      <xsl:call-template name="tUriCode">
                        <xsl:with-param name="pUri" select="$vSourceUri"/>
                      </xsl:call-template>
                    </transform>
                  </case>
                  <case test="default"><transform><xsl:value-of select="$vSourceUri"/></transform></case>
                </switch>
              </sf>
            </case>
          </switch>
        </case>
      </switch>
    </context>
  </df>

  <df tag="017">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='CopyrightNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/CopyrightNumber']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
      <sf code="b" chopPunct="true" repeatable="false"><select xpath="bf:assigner/bf:Agent/rdfs:label"/></sf>
      <sf code="d" chopPunct="true" repeatable="false"><select xpath="bf:date"/></sf>
      <sf code="i" chopPunct="true" repeatable="false"><select xpath="bf:note/bf:Note/rdfs:label"/></sf>
    </context>
  </df>

  <df tag="020">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Isbn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isbn']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
          <sf code="c" chopPunct="true" repeatable="false"><select xpath="ancestor::bf:Instance/bf:acquisitionTerms"/></sf>
        </case>
      </switch>
      <sf chopPunct="true" code="q"><select xpath="bf:qualifier"/></sf>
    </context>
  </df>

  <df tag="022">
    <context xpath="bf:Work/bf:identifiedBy/*[local-name()='Issn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']] | bf:Work/bf:identifiedBy/*[local-name()='IssnL' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/IssnL']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='canceled'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <switch>
            <case test="local-name()='Issn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']">
              <sf code="z"><select xpath="rdf:value"/></sf>
            </case>
            <case test="local-name()='IssnL' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/IssnL']">
              <sf code="m"><select xpath="rdf:value"/></sf>
            </case>
          </switch>
        </case>
        <case test="bf:status/bf:Status/rdfs:label[text()='incorrect'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/incorrect' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/incorrect'">
          <sf code="y"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <switch>
            <case test="local-name()='Issn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']">
              <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
            </case>
            <case test="local-name()='IssnL' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/IssnL']">
              <sf code="l" repeatable="false"><select xpath="rdf:value"/></sf>
            </case>
          </switch>
        </case>
      </switch>
      <sf code="2" chopPunct="true" repeatable="false"><select xpath="bf:assigner/bf:Agent/bf:code"/></sf>
    </context>
  </df>

  <df tag="024">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Isrc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isrc']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Upc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Upc']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Ismn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ismn']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Ean' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ean']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Sici' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Sici']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Ansi' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ansi']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Doi' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Doi']] |
      bf:Work/bf:identifiedBy/*[local-name()='Eidr' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bflc/Eidr']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Gtin14Number' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Gtin14Number']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Hdl' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Hdl']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Isan' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isan']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Isni' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isni']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Iso' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Iso']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Istc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Istc']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Iswc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Iswc']] |
      bf:Instance/bf:identifiedBy/*[local-name()='Urn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Urn']] |
      bf:Instance/bf:identifiedBy/bf:Identifier[not(rdf:type or bf:assigner/@rdf:resource='http://id.loc.gov/vocabulary/organizations/dgpo' or bf:assigner/*/@rdf:about='http://id.loc.gov/vocabulary/organizations/dgpo')]">
      <ind1 default="7">
        <switch>
          <case test="local-name()='Isrc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isrc']">0</case>
          <case test="local-name()='Upc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Upc']">1</case>
          <case test="local-name()='Ismn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ismn']">2</case>
          <case test="local-name()='Ean' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ean']">3</case>
          <case test="local-name()='Sici' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Sici']">4</case>
          <case test="local-name()='Identifier' and not(rdf:type) and not(rdfs:label) and not (bf:source)">8</case>
        </switch>
      </ind1>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
      <sf code="q" chopPunct="true"><select xpath="bf:qualifier"/></sf>
      <sf code="2" chopPunct="true">
        <switch>
          <case test="local-name()='Ansi' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Ansi']">ansi</case>
          <case test="local-name()='Doi' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Doi']">doi</case>
          <case test="local-name()='Eidr' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bflc/Eidr']">eidr</case>
          <case test="local-name()='Hdl' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Hdl']">hdl</case>
          <case test="local-name()='Gtin14Number' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Gtin14Number']">gtin-14</case>
          <case test="local-name()='Isan' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isan']">isan</case>
          <case test="local-name()='Isni' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isni']">isni</case>
          <case test="local-name()='Iso' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Iso']">iso</case>
          <case test="local-name()='Istc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Istc']">istc</case>
          <case test="local-name()='Iswc' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Iswc']">iswc</case>
          <case test="local-name()='Urn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Urn']">urn</case>
          <case test="default"><select xpath="rdfs:label"/></case>
        </switch>
      </sf>
    </context>
  </df>

  <df tag="025">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='LcOverseasAcq' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/LcOverseasAcq']] |
                    //bf:Item/bf:identifiedBy/*[local-name()='LcOverseasAcq' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/LcOverseasAcq']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="a"><select xpath="rdf:value"/></sf>
    </context>
  </df>

  <df tag="026">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Fingerprint' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Fingerprint']]|
                    //bf:Item/bf:identifiedBy/*[local-name()='Fingerprint' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Fingerprint']]">
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="e" repeatable="false"><select xpath="rdf:value"/></sf>
      <switch>
        <case test="bf:source/bf:Source/*[local-name()='code']">
          <sf code="2"><transform><xsl:value-of select="bf:source/bf:Source/*[local-name()='code'][1]"/></transform></sf>
        </case>
        <case test="$vSourceUri != ''">
          <sf code="2">
            <switch>
              <case test="contains($vSourceUri,'id.loc.gov')">
                <transform>
                  <xsl:call-template name="tUriCode">
                    <xsl:with-param name="pUri" select="$vSourceUri"/>
                  </xsl:call-template>
                </transform>
              </case>
              <case test="default"><transform><xsl:value-of select="$vSourceUri"/></transform></case>
            </switch>
          </sf>
        </case>
      </switch>
      <sf code="5">
        <select xpath="bflc:applicableInstitution/bf:Agent/bf:code"/>
      </sf>
    </context>
  </df>

  <df tag="027">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Strn' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Strn']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
      <sf chopPunct="true" code="q"><select xpath="bf:qualifier"/></sf>
    </context>
  </df>

  <df tag="028">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='AudioIssueNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/AudioIssueNumber']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='MatrixNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MatrixNumber']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='MusicPlate' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicPlate']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='MusicPublishingNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicPublishingNumber']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='VideoRecordingNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/VideoRecordingNumber']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='PublisherNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/PublisherNumber']] |
                    bf:Instance/bf:identifiedBy/*[local-name()='MusicDistributorNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicDistributorNumber']]">
      <ind1 default="5">
        <switch>
          <case test="local-name()='AudioIssueNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/AudioIssueNumber']">0</case>
          <case test="local-name()='MatrixNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MatrixNumber']">1</case>
          <case test="local-name()='MusicPlate' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicPlate']">2</case>
          <case test="local-name()='MusicPublishingNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicPublishingNumber']">3</case>
          <case test="local-name()='VideoRecordingNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/VideoRecordingNumber']">4</case>
          <case test="local-name()='MusicDistributorNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/MusicDistributorNumber']">6</case>
        </switch>
      </ind1>
      <ind2 default="2"/>
      <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
      <sf code="b" chopPunct="true" repeatable="false"><select xpath="bf:assigner/bf:Agent/rdfs:label"/></sf>
      <sf code="q" chopPunct="true"><select xpath="bf:qualifier"/></sf>
    </context>
  </df>

  <df tag="030">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Coden' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Coden']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z"><select xpath="rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
        </case>
      </switch>
    </context>
  </df>

  <df tag="032">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='PostalRegistration' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/PostalRegistration']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
      <sf code="b" chopPunct="true" repeatable="false"><select xpath="bf:assigner/bf:Agent/rdfs:label"/></sf>
    </context>
  </df>

  <df tag="033">
    <context xpath="bf:Work/bf:capture/bf:Capture[bf:date[@rdf:datatype='http://id.loc.gov/datatypes/edtf'] or bf:place/*[rdf:value]]">
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default=" ">
        <switch>
          <case test="count(bf:date)=1">
            <switch>
              <case test="contains(bf:date,'/')">2</case>
              <case test="default">0</case>
            </switch>
          </case>
          <case test="count(bf:date) > 1">1</case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="bf:note/bf:Note[rdfs:label='broadcast']">1</case>
          <case test="bf:note/bf:Note[rdfs:label='finding']">2</case>
        </switch>
      </ind2>
      <sf code="3" chopPunct="true" repeatable="false">
        <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
      </sf>
      <switch>
        <case test="count(bf:date)=1">
          <switch>
            <case test="bf:date/@rdf:datatype='http://id.loc.gov/datatypes/edtf'">
              <switch>
                <case test="contains(bf:date,'/')">
                  <transform>
                    <xsl:variable name="vDate1">
                      <xsl:variable name="vEDTFDate1">
                        <xsl:call-template name="EDTF-Date1">
                          <xsl:with-param name="pEDTFDate" select="bf:date"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:call-template name="EDTF-to-033">
                        <xsl:with-param name="pEDTFDate" select="$vEDTFDate1"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:variable name="vDate2">
                      <xsl:variable name="vEDTFDate2">
                        <xsl:call-template name="EDTF-Date2">
                          <xsl:with-param name="pEDTFDate" select="bf:date"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:call-template name="EDTF-to-033">
                        <xsl:with-param name="pEDTFDate" select="$vEDTFDate2"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <marc:subfield code="a"><xsl:value-of select="$vDate1"/></marc:subfield>
                    <marc:subfield code="a"><xsl:value-of select="$vDate2"/></marc:subfield>
                  </transform>
                </case>
                <case test="default">
                  <transform>
                    <xsl:variable name="v033Date">
                      <xsl:call-template name="EDTF-to-033">
                        <xsl:with-param name="pEDTFDate" select="bf:date"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <marc:subfield code="a"><xsl:value-of select="$v033Date"/></marc:subfield>
                  </transform>
                </case>
              </switch>
            </case>
            <case test="default">
              <transform>
                <xsl:message>Record <xsl:value-of select="$vRecordId"/>: Unprocessed bf:date node, value <xsl:value-of select="bf:date"/>. Unknown data type (must be EDTF)</xsl:message>
                <marc:subfield code="a">--------</marc:subfield>
              </transform>
            </case>
          </switch>
        </case>
        <case test="default">
          <select xpath="bf:date">
            <switch>
              <case test="@rdf:datatype='http://id.loc.gov/datatypes/edtf'">
                <switch>
                  <case test="contains(.,'/')">
                    <transform>
                      <xsl:message>Record <xsl:value-of select="$vRecordId"/>: Unprocessed bf:date node, value <xsl:value-of select="."/>. Range of EDTF dates detected where only single value allowed.</xsl:message>
                      <marc:subfield code="a">--------</marc:subfield>
                    </transform>
                  </case>
                  <case test="default">
                    <transform>
                      <xsl:variable name="v033Date">
                        <xsl:call-template name="EDTF-to-033">
                          <xsl:with-param name="pEDTFDate" select="."/>
                        </xsl:call-template>
                      </xsl:variable>
                      <marc:subfield code="a"><xsl:value-of select="$v033Date"/></marc:subfield>
                    </transform>
                  </case>
                </switch>
              </case>
              <case test="default">
                <transform>
                  <xsl:message>Record <xsl:value-of select="$vRecordId"/>: Unprocessed bf:date node, value <xsl:value-of select="."/>. Unknown data type (must be EDTF)</xsl:message>
                  <marc:subfield code="a">--------</marc:subfield>
                </transform>
              </case>
            </switch>
          </select>
        </case>
      </switch>
      <select xpath="bf:place/bf:Place">
        <switch>
          <case test="bf:source/bf:Source/bf:code='lcc-g' or bf:source/bf:Source/@rdf:about='http://id.loc.gov/authorities/classification/G' or bf:source/@rdf:resource='http://id.loc.gov/authorities/classification/G'">
            <switch>
              <case test="contains(rdf:value,' ')">
                <transform>
                  <marc:subfield code="b"><xsl:value-of select="substring-before(rdf:value,' ')"/></marc:subfield>
                  <marc:subfield code="c"><xsl:value-of select="substring-after(rdf:value,' ')"/></marc:subfield>
                </transform>
              </case>
              <case test="default">
                <transform>
                  <marc:subfield code="b"><xsl:value-of select="rdf:value"/></marc:subfield>
                </transform>
              </case>
            </switch>
          </case>
          <case test="default">
            <transform>
              <marc:subfield code="p">
                <xsl:choose>
                  <xsl:when test="rdf:value"><xsl:value-of select="rdf:value"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:call-template name="tChopPunct">
                      <xsl:with-param name="pString" select="rdfs:label"/>
                    </xsl:call-template>
                  </xsl:otherwise>
                </xsl:choose>
              </marc:subfield>
            </transform>
            <switch>
              <case test="bf:source/bf:Source/*[local-name()='code']">
                <sf code="2"><transform><xsl:value-of select="bf:source/bf:Source/*[local-name()='code'][1]"/></transform></sf>
              </case>
              <case test="$vSourceUri != ''">
                <sf code="2">
                  <switch>
                    <case test="contains($vSourceUri,'id.loc.gov')">
                      <transform>
                        <xsl:call-template name="tUriCode">
                          <xsl:with-param name="pUri" select="$vSourceUri"/>
                        </xsl:call-template>
                      </transform>
                    </case>
                    <case test="default"><transform><xsl:value-of select="$vSourceUri"/></transform></case>
                  </switch>
                </sf>
              </case>
            </switch>
          </case>
        </switch>
      </select>
    </context>
  </df>

  <df tag="035">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='Local' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Local']]">
      <var name="vAssignerUri">
        <switch>
          <case test="bf:assigner/@rdf:resource"><transform><xsl:value-of select="bf:assigner/@rdf:resource"/></transform></case>
          <case test="bf:assigner/*/@rdf:about"><transform><xsl:value-of select="bf:assigner/*/@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vAssignerCode">
        <switch>
          <case test="bf:assigner/*/*[local-name()='code']">
            <transform><xsl:value-of select="bf:assigner/*/*[local-name()='code'][1]"/></transform>
          </case>
          <case test="$vAssignerUri != ''">
            <switch>
              <case test="contains($vAssignerUri,'id.loc.gov')">
                <transform>
                  <xsl:call-template name="tUriCode">
                    <xsl:with-param name="pUri" select="$vAssignerUri"/>
                  </xsl:call-template>
                </transform>
              </case>
              <case test="default"><transform><xsl:value-of select="$vAssignerUri"/></transform></case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vAssignerString">
        <switch>
          <case test="$vAssignerCode != ''">
            <transform><xsl:value-of select="concat('(',$vAssignerCode,')')"/></transform>
          </case>
        </switch>
      </var>
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="bf:status/bf:Status/rdfs:label[text()='invalid'] or
                    bf:status/@rdf:resource='http://id.loc.gov/vocabulary/mstatus/invalid' or
                    bf:status/bf:Status/@rdf:about='http://id.loc.gov/vocabulary/mstatus/invalid'">
          <sf code="z">
            <transform>
              <xsl:value-of select="concat($vAssignerString,rdf:value)"/>
            </transform>
          </sf>
        </case>
        <case test="default">
          <sf code="a" repeatable="false">
            <transform>
              <xsl:value-of select="concat($vAssignerString,rdf:value)"/>
            </transform>
          </sf>
        </case>
      </switch>
    </context>
  </df>

  <df tag="036" repeatable="false">
    <context xpath="bf:Instance/bf:identifiedBy/*[local-name()='StudyNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/StudyNumber']]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="a" repeatable="false"><select xpath="rdf:value"/></sf>
      <sf code="b" chopPunct="true" repeatable="false"><select xpath="bf:assigner/bf:Agent/rdfs:label"/></sf>
    </context>
  </df>

  <df tag="037">
    <context xpath="bf:Instance/bf:acquisitionSource/bf:AcquisitionSource |
                    //bf:Item/bf:acquisitionSource/bf:AcquisitionSource">
      <ind1 default=" ">
        <switch>
          <case test="bf:note/bf:Note/rdfs:label[text()='intervening source']">2</case>
          <case test="bf:note/bf:Note/rdfs:label[text()='current source']">3</case>
        </switch>
      </ind1>
      <ind2 default=" "/>
      <sf code="3" chopPunct="true" repeatable="false">
        <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
      </sf>
      <sf code="a" repeatable="false">
        <select xpath="bf:identifiedBy/*[local-name()='StockNumber' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/StudyNumber']]/rdf:value"/>
      </sf>
      <sf code="b" chopPunct="true" repeatable="false"><select xpath="bf:source/bf:Source/rdfs:label"/></sf>
      <sf code="c" chopPunct="true"><select xpath="bf:acquisitionTerms"/></sf>
      <sf code="n" chopPunct="true">
        <select xpath="bf:note/bf:Note/rdfs:label[text() != 'intervening source' and text() != 'current source']"/>
      </sf>
      <sf code="5"><select xpath="bflc:applicableInstitution/bf:Agent/bf:code"/></sf>
    </context>
  </df>

  <switch>
    <case test="$vAdminMetadata/bflc:metadataLicensor">
      <df tag="038" repeatable="false">
        <ind1 default=" "/>
        <ind2 default=" "/>
        <sf code="a" repeatable="false">
          <transform>
            <xsl:call-template name="tChopPunct">
              <xsl:with-param name="pString" select="$vAdminMetadata/bflc:metadataLicensor/bflc:MetadataLicensor/rdfs:label|$vAdminMetadata/bflc:metadataLicensor/*[local-name()='Authority' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#Authority']]/madsrdf:code[@rdf:datatype='http://id.loc.gov/datatypes/orgs/code']"/>
            </xsl:call-template>
          </transform>
        </sf>
      </df>
    </case>
  </switch>

  <df tag="040" repeatable="false">
    <context xpath="bf:Instance/bf:adminMetadata/bf:AdminMetadata/bf:assigner |
                    bf:Work/bf:adminMetadata/bf:AdminMetadata/bf:assigner">
      <var name="vLanguageUri">
        <switch>
          <case test="../bf:descriptionLanguage/@rdf:resource"><transform><xsl:value-of select="../bf:descriptionLanguage/@rdf:resource"/></transform></case>
          <case test="../bf:descriptionLanguage/*/@rdf:about"><transform><xsl:value-of select="../bf:descriptionLanguage/*/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default=" "/>
      <ind2 default=" "/>
      <sf code="a" repeatable="false"><select xpath="*/*[local-name()='code']"/></sf>
      <switch>
        <case test="$vLanguageUri != '' and contains($vLanguageUri,'id.loc.gov')">
          <sf code="b">
            <transform>
              <xsl:call-template name="tUriCode">
                <xsl:with-param name="pUri" select="$vLanguageUri"/>
              </xsl:call-template>
            </transform>
          </sf>
        </case>
        <case test="../bf:descriptionLanguage/*/*[local-name()='code']">
          <sf code="b">
            <transform><xsl:value-of select="../bf:descriptionLanguage/*/*[local-name()='code']"/></transform>
          </sf>
        </case>
      </switch>
      <sf code="d">
        <select xpath="../bf:descriptionModifier">
          <var name="vAgentUri">
            <switch>
              <case test="@rdf:resource"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
              <case test="*/@rdf:about"><transform><xsl:value-of select="*/@rdf:about"/></transform></case>
            </switch>
          </var>
          <switch>
            <case test="$vAgentUri != '' and contains($vAgentUri,'id.loc.gov')">
              <transform>
                <xsl:call-template name="tUriCode">
                  <xsl:with-param name="pUri" select="$vAgentUri"/>
                </xsl:call-template>
              </transform>
            </case>
            <case test="default"><transform><xsl:value-of select="*/*[local-name()='code']"/></transform></case>
          </switch>
        </select>
      </sf>
      <sf code="d">DLC</sf>
      <sf code="e">
        <select xpath="../bf:descriptionConventions[not(contains(@rdf:resource,'isbd')) and
                                                    not(contains(*/@rdf:about,'isbd')) and
                                                    not(*/rdf:value='isbd') and
                                                    not(*/*[local-name()='code']='isbd') and
                                                    not(*/rdfs:label='isbd')]">
          <var name="vConvUri">
            <switch>
              <case test="@rdf:resource"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
              <case test="*/@rdf:about"><transform><xsl:value-of select="*/@rdf:about"/></transform></case>
            </switch>
          </var>
          <switch>
            <case test="$vConvUri != '' and contains($vConvUri,'id.loc.gov')">
              <transform>
                <xsl:call-template name="tUriCode">
                  <xsl:with-param name="pUri" select="$vConvUri"/>
                </xsl:call-template>
              </transform>
            </case>
            <case test="*/rdf:value">
              <transform><xsl:value-of select="*/rdf:value"/></transform>
            </case>
            <case test="*/*[local-name()='code']">
              <transform><xsl:value-of select="*/*[local-name()='code']"/></transform>
            </case>
            <case test="default"><transform><xsl:value-of select="*/rdfs:label"/></transform></case>
          </switch>
        </select>
      </sf>
    </context>
  </df>

  <switch>
    <case test="bf:Work[count(bf:language/bf:Language[not(bf:source)])&gt;1]">
      <df tag="041">
        <ind1 default=" ">
          <switch>
            <case test="bf:Work/bf:note/bf:Note[rdfs:label='Includes translation']">1</case>
          </switch>
        </ind1>
        <ind2 default=" "/>
        <!-- making dubious assertion that first language property is primary -->
        <transform>
          <xsl:variable name="vPrimaryLangElement" select="bf:Work/bf:language/bf:Language[not(bf:source) and not(bf:part)][1]"/>
          <xsl:variable name="vPrimaryLang">
            <xsl:choose>
              <xsl:when test="starts-with($vPrimaryLangElement/@rdf:about,'http://id.loc.gov/vocabulary/languages/')">
                <xsl:value-of select="substring-after($vPrimaryLangElement/@rdf:about,'http://id.loc.gov/vocabulary/languages/')"/>
              </xsl:when>
              <xsl:when test="$vPrimaryLangElement/madsrdf:code">
                <xsl:value-of select="$vPrimaryLangElement/madsrdf:code"/>
              </xsl:when>
              <xsl:when test="starts-with($vPrimaryLangElement/rdf:value,'http://id.loc.gov/vocabulary/languages/')">
                <xsl:value-of select="substring-after($vPrimaryLangElement/rdf:value,'http://id.loc.gov/vocabulary/languages/')"/>
              </xsl:when>
              <xsl:when test="starts-with($vPrimaryLangElement/rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')">
                <xsl:value-of select="substring-after($vPrimaryLangElement/rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')"/>
              </xsl:when>
              <xsl:when test="$vPrimaryLangElement/rdf:value"><xsl:value-of select="$vPrimaryLangElement/rdf:value"/></xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$vPrimaryLangElement/rdfs:label"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:for-each select="bf:Work/bf:language/bf:Language[not(bf:source) and not(bf:part)]">
            <xsl:choose>
              <xsl:when test="position() = 1">
                <marc:subfield code="a"><xsl:value-of select="$vPrimaryLang"/></marc:subfield>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="vCurrentLang">
                  <xsl:choose>
                    <xsl:when test="starts-with(@rdf:about,'http://id.loc.gov/vocabulary/languages/')">
                      <xsl:value-of select="substring-after(@rdf:about,'http://id.loc.gov/vocabulary/languages/')"/>
                    </xsl:when>
                    <xsl:when test="madsrdf:code">
                      <xsl:value-of select="madsrdf:code"/>
                    </xsl:when>
                    <xsl:when test="starts-with(rdf:value,'http://id.loc.gov/vocabulary/languages/')">
                      <xsl:value-of select="substring-after(rdf:value,'http://id.loc.gov/vocabulary/languages/')"/>
                    </xsl:when>
                    <xsl:when test="starts-with($vPrimaryLangElement/rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')">
                      <xsl:value-of select="substring-after(rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')"/>
                    </xsl:when>
                    <xsl:when test="rdf:value"><xsl:value-of select="rdf:value"/></xsl:when>
                    <xsl:when test="rdfs:label"><xsl:value-of select="rdfs:label"/></xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="$vCurrentLang != '' and $vCurrentLang != $vPrimaryLang">
                    <marc:subfield code="a"><xsl:value-of select="$vCurrentLang"/></marc:subfield>
                  </xsl:when>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:for-each>
        </transform>
        <select xpath="bf:Work/bf:language/bf:Language[not(bf:source) and bf:part]">
          <transform>
            <xsl:variable name="vSubfield">
              <xsl:choose>
                <xsl:when test="bf:part='summary'">b</xsl:when>
                <xsl:when test="bf:part='sung or spoken text'">d</xsl:when>
                <xsl:when test="bf:part='libretto'">e</xsl:when>
                <xsl:when test="bf:part='table of contents'">f</xsl:when>
                <xsl:when test="bf:part='accompanying material'">g</xsl:when>
                <xsl:when test="bf:part='original'">h</xsl:when>
                <xsl:when test="bf:part='intertitles'">i</xsl:when>
                <xsl:when test="bf:part='subtitles or captions'">j</xsl:when>
                <xsl:when test="bf:part='intermediate translations'">k</xsl:when>
                <xsl:when test="bf:part='original accompanying materials'">m</xsl:when>
                <xsl:when test="bf:part='original libretto'">n</xsl:when>
                <xsl:when test="bf:part='captions'">p</xsl:when>
                <xsl:when test="bf:part='accessible audio'">q</xsl:when>
                <xsl:when test="bf:part='accessible visual material'">r</xsl:when>
                <xsl:when test="bf:part='accompanying transcripts'">t</xsl:when>
                <xsl:otherwise>a</xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <marc:subfield>
              <xsl:attribute name="code"><xsl:value-of select="$vSubfield"/></xsl:attribute>
              <xsl:choose>
                <xsl:when test="starts-with(@rdf:about,'http://id.loc.gov/vocabulary/languages/')">
                  <xsl:value-of select="substring-after(@rdf:about,'http://id.loc.gov/vocabulary/languages/')"/>
                </xsl:when>
                <xsl:when test="madsrdf:code"><xsl:value-of select="madsrdf:code"/></xsl:when>
                <xsl:when test="starts-with(rdf:value,'http://id.loc.gov/vocabulary/languages/')">
                  <xsl:value-of select="substring-after(rdf:value,'http://id.loc.gov/vocabulary/languages/')"/>
                </xsl:when>
                <xsl:when test="starts-with(rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')">
                  <xsl:value-of select="substring-after(rdf:value/@rdf:resource,'http://id.loc.gov/vocabulary/languages/')"/>
                </xsl:when>
                <xsl:when test="rdf:value"><xsl:value-of select="rdf:value"/></xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="tChopPunct">
                    <xsl:with-param name="pString" select="rdfs:label"/>
                  </xsl:call-template>
                </xsl:otherwise>
              </xsl:choose>
            </marc:subfield>
          </transform>
        </select>
      </df>
    </case>
  </switch>

  <df tag="041">
    <context xpath="bf:Work/bf:language/bf:Language[bf:source]">
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default=" "/>
      <ind2 default=" "/>
      <select xpath=".">
        <transform>
          <xsl:variable name="vSubfield">
            <xsl:choose>
              <xsl:when test="bf:part='summary'">b</xsl:when>
              <xsl:when test="bf:part='sung or spoken text'">d</xsl:when>
              <xsl:when test="bf:part='libretto'">e</xsl:when>
              <xsl:when test="bf:part='table of contents'">f</xsl:when>
              <xsl:when test="bf:part='accompanying material'">g</xsl:when>
              <xsl:when test="bf:part='original'">h</xsl:when>
              <xsl:when test="bf:part='intertitles'">i</xsl:when>
              <xsl:when test="bf:part='subtitles or captions'">j</xsl:when>
              <xsl:when test="bf:part='intermediate translations'">k</xsl:when>
              <xsl:when test="bf:part='original accompanying materials'">m</xsl:when>
              <xsl:when test="bf:part='original libretto'">n</xsl:when>
              <xsl:when test="bf:part='captions'">p</xsl:when>
              <xsl:when test="bf:part='accessible audio'">q</xsl:when>
              <xsl:when test="bf:part='accessible visual material'">r</xsl:when>
              <xsl:when test="bf:part='accompanying transcripts'">t</xsl:when>
              <xsl:otherwise>a</xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <marc:subfield>
            <xsl:attribute name="code"><xsl:value-of select="$vSubfield"/></xsl:attribute>
            <xsl:value-of select="rdf:value"/>
          </marc:subfield>
          <marc:subfield code="2">
            <xsl:choose>
              <xsl:when test="bf:source/bf:Source/*[local-name()='code']">
                <xsl:value-of select="bf:source/bf:Source/*[local-name()='code']"/>
              </xsl:when>
              <xsl:when test="$vSourceUri != ''">
                <xsl:choose>
                  <xsl:when test="contains($vSourceUri,'id.loc.gov')">
                    <xsl:call-template name="tUriCode">
                      <xsl:with-param name="pUri" select="$vSourceUri"/>
                    </xsl:call-template>
                  </xsl:when>
                  <xsl:otherwise><xsl:value-of select="$vSourceUri"/></xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="tChopPunct">
                  <xsl:with-param name="pString" select="bf:source/bf:Source/rdfs:label"/>
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </marc:subfield>
        </transform>
      </select>
    </context>
  </df>

  <switch>
    <case test="$vAdminMetadata/bf:descriptionAuthentication">
      <df tag="042" repeatable="false">
        <ind1 default=" "/>
        <ind2 default=" "/>
        <sf code="a">
          <select xpath="$vAdminMetadata/bf:descriptionAuthentication">
            <switch>
              <case test="*/rdf:value">
                <transform><xsl:value-of select="*/rdf:value"/></transform>
              </case>
              <case test="*/*[local-name()='code']">
                <transform><xsl:value-of select="*/*[local-name()='code']"/></transform>
              </case>
              <case test="starts-with(*/@rdf:about,'http://id.loc.gov/vocabulary/marcauthen/')">
                <transform><xsl:value-of select="substring-after(*/@rdf:about,'http://id.loc.gov/vocabulary/marcauthen/')"/></transform>
              </case>
              <case test="starts-with(@rdf:resource,'http://id.loc.gov/vocabulary/marcauthen/')">
                <transform><xsl:value-of select="substring-after(@rdf:resource,'http://id.loc.gov/vocabulary/marcauthen/')"/></transform>
              </case>
              <case test="default">
                <transform>
                  <xsl:message>Record <xsl:value-of select="$vRecordId"/>: missing value from bf:descriptionAuthentication property</xsl:message>
                </transform>
              </case>
            </switch>
          </select>
        </sf>
      </df>
    </case>
  </switch>

  <df tag="043">
    <context xpath="bf:Work/bf:geographicCoverage[not(bf:GeographicCoverage/bf:source/@rdf:resource='http://id.loc.gov/vocabulary/classSchemes/lcc') and
                    not(bf:GeographicCoverage/bf:source/bf:Source/@rdf:about='http://id.loc.gov/vocabulary/classSchemes/lcc') and
                    not(bf:GeographicCoverage/bf:source/bf:Source/bf:code='lcc') and
                    (@rdf:resource or bf:GeographicCoverage/@rdf:about or bf:GeographicCoverage/rdf:value)]">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <var name="vUri">
        <switch>
          <case test="@rdf:resource"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
          <case test="*/@rdf:about"><transform><xsl:value-of select="*/@rdf:about"/></transform></case>
        </switch>
      </var>
      <switch>
        <case test="starts-with($vUri,'http://id.loc.gov/vocabulary/geographicAreas/')">
          <sf code="a">
            <transform>
              <xsl:call-template name="tPadRight">
                <xsl:with-param name="pInput" select="substring-after($vUri,'http://id.loc.gov/vocabulary/geographicAreas/')"/>
                <xsl:with-param name="pPadChar" select="'-'"/>
                <xsl:with-param name="pStringLength" select="7"/>
              </xsl:call-template>
            </transform>
          </sf>
        </case>
        <case test="bf:GeographicCoverage/bf:source/bf:Source/bf:code='ISO 3166'">
          <sf code="c"><select xpath="bf:GeographicCoverage/rdf:value"/></sf>
        </case>
        <case test="default">
          <sf code="b"><select xpath="bf:GeographicCoverage/rdf:value"/></sf>
          <sf code="2"><select xpath="bf:GeographicCoverage/bf:source/bf:Source/bf:code"/></sf>
        </case>
      </switch>
      <switch>
        <case test="$vUri != ''">
          <sf code="0"><transform><xsl:value-of select="$vUri"/></transform></sf>
        </case>
      </switch>
      <sf code="0">
        <select xpath="*/bf:identifiedBy/bf:Identifier">
          <transform>
            <xsl:variable name="vIdType">
              <xsl:call-template name="tChopPunct">
                <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
            </xsl:choose>
          </transform>
        </select>
      </sf>
    </context>
  </df>

  <switch>
    <case test="bf:Work/bf:temporalCoverage">
      <df tag="045">
        <ind1 default=" ">
          <switch>
            <case test="count(bf:Work/bf:temporalCoverage[(@rdf:datatype='http://id.loc.gov/datatypes/edtf' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#date' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime') and not(contains(.,'X')) and not (contains(.,'/'))]) = 1">0</case>
            <case test="count(bf:Work/bf:temporalCoverage[(@rdf:datatype='http://id.loc.gov/datatypes/edtf' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#date' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime') and not(contains(.,'X')) and not (contains(.,'/'))]) &gt; 1">1</case>
            <case test="count(bf:Work/bf:temporalCoverage[(@rdf:datatype='http://id.loc.gov/datatypes/edtf' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#date' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime') and not(contains(.,'X')) and contains(.,'/')]) = 1">2</case>
          </switch>
        </ind1>
        <ind2 default=" "/>
        <sf code="a">
          <select xpath="bf:Work/bf:temporalCoverage[@rdf:datatype='http://id.loc.gov/datatypes/edtf' and contains(.,'X')]">
            <switch>
              <case test="contains(.,'/')">
                <transform>
                  <xsl:variable name="v045Date1">
                    <xsl:variable name="vDate1">
                      <xsl:call-template name="EDTF-Date1">
                        <xsl:with-param name="pEDTFDate" select="."/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="starts-with($vDate1,'-')">
                        <xsl:value-of select="exsl:node-set($df045BCEtimePeriods)/*[edtfDate=$vDate1]/code"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="vCentury" select="exsl:node-set($df045CEtimePeriods)/*[century=substring($vDate1,1,2)]/code"/>
                        <xsl:variable name="vDecade">
                          <xsl:choose>
                            <xsl:when test="substring($vDate1,3,1)='X'">-</xsl:when>
                            <xsl:otherwise><xsl:value-of select="substring($vDate1,3,1)"/></xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:value-of select="concat($vCentury,$vDecade)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="v045Date2">
                    <xsl:variable name="vDate2">
                      <xsl:call-template name="EDTF-Date2">
                        <xsl:with-param name="pEDTFDate" select="."/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="starts-with($vDate2,'-')">
                        <xsl:value-of select="exsl:node-set($df045BCEtimePeriods)/*[edtfDate=$vDate2]/code"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="vCentury" select="exsl:node-set($df045CEtimePeriods)/*[century=substring($vDate2,1,2)]/code"/>
                        <xsl:variable name="vDecade">
                          <xsl:choose>
                            <xsl:when test="substring($vDate2,3,1)='X'">-</xsl:when>
                            <xsl:otherwise><xsl:value-of select="substring($vDate2,3,1)"/></xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:value-of select="concat($vCentury,$vDecade)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:value-of select="concat($v045Date1,$v045Date2)"/>
                </transform>
              </case>
              <case test="default">
                <switch>
                  <case test="starts-with(.,'-')">
                    <transform>
                      <xsl:variable name="vEdtfDate" select="."/>
                      <xsl:value-of select="concat(exsl:node-set($df045BCEtimePeriods)/*[edtfDate=$vEdtfDate]/code,exsl:node-set($df045BCEtimePeriods)/*[edtfDate=$vEdtfDate]/code)"/>
                    </transform>
                  </case>
                  <case test="default">
                    <transform>
                      <xsl:variable name="vEdtfDate" select="."/>
                      <xsl:variable name="vCentury" select="exsl:node-set($df045CEtimePeriods)/*[century=substring($vEdtfDate,1,2)]/code"/>
                      <xsl:choose>
                        <xsl:when test="substring($vEdtfDate,3,1)='X'">
                          <xsl:value-of select="concat($vCentury,'-',$vCentury,'-')"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="concat($vCentury,substring($vEdtfDate,3,1),$vCentury,substring($vEdtfDate,3,1))"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </transform>
                  </case>
                </switch>
              </case>
            </switch>
          </select>
        </sf>
        <select xpath="bf:Work/bf:temporalCoverage[not(contains(.,'X'))]">
          <switch>
            <case test="@rdf:datatype='http://id.loc.gov/datatypes/edtf' and contains(.,'/')">
              <transform>
                <xsl:variable name="vDate1">
                    <xsl:call-template name="EDTF-Date1">
                      <xsl:with-param name="pEDTFDate" select="."/>
                    </xsl:call-template>
                </xsl:variable>
                <xsl:variable name="vDate2">
                  <xsl:call-template name="EDTF-Date2">
                    <xsl:with-param name="pEDTFDate" select="."/>
                  </xsl:call-template>
                </xsl:variable>
                <marc:subfield code="b">
                  <xsl:choose>
                    <xsl:when test="substring($vDate1,1,1) = '-'">
                      <xsl:value-of select="concat('c',translate($vDate1,' -:T',''))"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('d',translate($vDate1,' -:T',''))"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </marc:subfield>
                <marc:subfield code="b">
                  <xsl:choose>
                    <xsl:when test="substring($vDate2,1,1) = '-'">
                      <xsl:value-of select="concat('c',translate($vDate2,' -:T',''))"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('d',translate($vDate2,' -:T',''))"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </marc:subfield>
              </transform>
            </case>
            <case test="(@rdf:datatype='http://id.loc.gov/datatypes/edtf' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#date' or @rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime') and not (contains(.,'/'))">
              <transform>
                <marc:subfield code="b">
                  <xsl:choose>
                    <xsl:when test="substring(.,1,1) = '-'">
                      <xsl:value-of select="concat('c',translate(.,' -:T',''))"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('d',translate(.,' -:T',''))"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </marc:subfield>
              </transform>
            </case>
            <case test="default">
              <transform>
                <xsl:message>Record <xsl:value-of select="$vRecordId"/>: no datatype for bf:temporalCoverage predicate, putting unformatted string into 045 $b</xsl:message>
                <marc:subfield chopPunct="true" code="b"><select xpath="."/></marc:subfield>
              </transform>
            </case>
          </switch>
        </select>
      </df>
    </case>
  </switch>

  <switch>
    <case test="bf:Work/bf:instrument/bf:MusicInstrument or
      bf:Work/bf:ensemble/bf:MusicEnsemble or
      bf:Work/bf:voice/bf:MusicVoice">
      <df tag="048">
        <ind1 default=" "/>
        <ind2 default=" "/>
        <select xpath="bf:Work/bf:instrument/bf:MusicInstrument|bf:Work/bf:ensemble/bf:MusicEnsemble|bf:Work/bf:voice/bf:MusicVoice">
          <sf code="a">
            <transform>
              <xsl:variable name="vType">
                <xsl:choose>
                  <xsl:when test="local-name() = 'MusicInstrument'"><xsl:value-of select="bf:instrumentalType"/></xsl:when>
                  <xsl:when test="local-name() = 'MusicEnsemble'"><xsl:value-of select="bf:ensembleType"/></xsl:when>
                  <xsl:when test="local-name() = 'MusicVoice'"><xsl:value-of select="bf:voiceType"/></xsl:when>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="vLabel"><xsl:value-of select="rdfs:label"/></xsl:variable>
              <xsl:variable name="vCode">
                <xsl:choose>
                  <xsl:when test="rdfs:label and $vType != ''">
                    <xsl:choose>
                      <xsl:when test="exsl:node-set($df048performers)/performer[type=$vType and label=$vLabel]">
                        <xsl:value-of select="exsl:node-set($df048performers)/performer[type=$vType and label=$vLabel]/code"/>
                      </xsl:when>
                      <xsl:when test="exsl:node-set($df048performers)/performer[type=$vType and not(label)]">
                        <xsl:value-of select="exsl:node-set($df048performers)/performer[type=$vType and not(label)]/code"/>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:when test="$vType != ''">
                    <xsl:value-of select="exsl:node-set($df048performers)/performer[type=$vType and not(label)]/code"/>
                  </xsl:when>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="vCount">
                <xsl:if test="bf:count"><xsl:value-of select="format-number(bf:count,'00')"/></xsl:if>
              </xsl:variable>
              <xsl:choose>
                <xsl:when test="$vCode != ''">
                  <xsl:value-of select="concat($vCode,$vCount)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:message>Record <xsl:value-of select="$vRecordId"/>: no 048 performer match for <xsl:value-of select="name()"/>[<xsl:value-of select="position()"/>]</xsl:message>
                </xsl:otherwise>
              </xsl:choose>
            </transform>
          </sf>
        </select>
      </df>
    </case>
  </switch>

</rules>
